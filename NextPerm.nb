(* A function to find the next lexicographically greater permutation *)
nextPermutation[list_] := Module[{i = Length[list] - 1, j, pivot, successor, newList},
  While[i >= 1 && list[[i]] >= list[[i + 1]], i--];
  If[i == 0, Return[Reverse[list]]];
  
  pivot = list[[i]];
  j = Length[list];
  While[list[[j]] <= pivot, j--];
  successor = list[[j]];
  
  newList = list;
  newList[[i]] = successor;
  newList[[j]] = pivot;
  
  Join[Take[newList, i], Reverse[Drop[newList, i]]]
]

(* A function to find the next permutation of a number *)
nextPermutationInteger[n_] := Module[{digitList, nextPermutationList},
  digitList = IntegerDigits[n];
  nextPermutationList = nextPermutation[digitList];
  FromDigits[nextPermutationList]
]

(* Testing functions *)
testNextPermutation[] := Module[{},
  Print["Testing nextPermutation"];
  Print[nextPermutation[{1, 2, 3}]]; (* should print {1, 3, 2} *)
  Print[nextPermutation[{1, 3, 2}]]; (* should print {2, 1, 3} *)
  Print[nextPermutation[{3, 2, 1}]]; (* should print {1, 2, 3} *)
]

testNextPermutationInteger[] := Module[{},
  Print["Testing nextPermutationInteger"];
  Print[nextPermutationInteger[123]]; (* should print 132 *)
  Print[nextPermutationInteger[132]]; (* should print 213 *)
  Print[nextPermutationInteger[321]]; (* should print 123 *)
]

(* Call the testing functions *)
testNextPermutation[]
testNextPermutationInteger[]
